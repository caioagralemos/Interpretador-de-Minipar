SEQ
# Funções auxiliares
function sigmoid(x)
    return 1 / (1 + exp(-x));

function sigmoid_deriv(x)
    return x * (1 - x);

# Entradas XOR
input0 = 0
input1 = 0
input2 = 1
input3 = 1
output0 = 0
output1 = 1
output2 = 1
output3 = 0

# Pesos e bias (inicialização estática)
wih00 = 0.1; wih01 = 0.2; wih02 = 0.3
wih10 = 0.4; wih11 = 0.5; wih12 = 0.6
who0 = 0.7; who1 = 0.8; who2 = 0.9
bh0 = 0.1; bh1 = 0.1; bh2 = 0.1
bo = 0.1
lr = 0.2
epoch = 0

# Loop de treino (simplificado para 1 exemplo XOR)
while (epoch < 10000)
    epoch = epoch + 1;

    # Input fixo: [1, 0] -> output = 1
    in0 = 1; in1 = 0; expected = 1;

    # Feedforward
    h0 = sigmoid(in0 * wih00 + in1 * wih10 + bh0)
    h1 = sigmoid(in0 * wih01 + in1 * wih11 + bh1)
    h2 = sigmoid(in0 * wih02 + in1 * wih12 + bh2)

    out = sigmoid(h0 * who0 + h1 * who1 + h2 * who2 + bo)

    # Erro e derivada
    error = expected - out
    d_out = error * sigmoid_deriv(out)

    # Backpropagation para hidden
    d_h0 = d_out * who0 * sigmoid_deriv(h0)
    d_h1 = d_out * who1 * sigmoid_deriv(h1)
    d_h2 = d_out * who2 * sigmoid_deriv(h2)

    # Atualização dos pesos e bias
    who0 = who0 + lr * h0 * d_out
    who1 = who1 + lr * h1 * d_out
    who2 = who2 + lr * h2 * d_out
    bo = bo + lr * d_out

    wih00 = wih00 + lr * in0 * d_h0
    wih01 = wih01 + lr * in0 * d_h1
    wih02 = wih02 + lr * in0 * d_h2
    wih10 = wih10 + lr * in1 * d_h0
    wih11 = wih11 + lr * in1 * d_h1
    wih12 = wih12 + lr * in1 * d_h2

    bh0 = bh0 + lr * d_h0
    bh1 = bh1 + lr * d_h1
    bh2 = bh2 + lr * d_h2

# Teste final
output("Input: [1, 0], Predicted Output: ")
output(out)
